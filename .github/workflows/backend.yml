name: Backend CI (unit & E2E tests)

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_call:


env:
  AUTH0_AUDIENCE:  ${{ secrets.AUTH0_AUDIENCE }}
  AUTH0_AUDIENCE2: ${{ vars.AUTH0_AUDIENCE }}

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

    - name: Test
      env:
        TEST_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TEST_SECRET: ${{ secrets.SECRET }}
      run: |
        echo ${#TEST_GITHUB_TOKEN}
        echo ${#TEST_SECRET}

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Check for Secret availability
      id: secret-check
      # perform secret check & put boolean result as an output
      shell: bash
      run: |
        if [ "${{ secrets.SECRET }}" != '' ]; then
          echo "available=true" >> $GITHUB_OUTPUT;
        else
          echo "available=false" >> $GITHUB_OUTPUT;
        fi

    - name: Check Inadequate Permissions
      if: ${{ steps.secret-check.outputs.available != 'true' }}
      # provide feedback for likely problem, note dependabot cannot access
      # secrets by default. Secondly, this step forces job failure due to
      # missing secret via `exit 1`
      shell: bash
      run: |
        if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
          echo >&2 "Unable to access secrets as unprivileged dependabot.";
        else
          echo >&2 "Inadequate Permissions or missing secret value";
        fi

    - name: Execute Step requiring secret
      # If you didn't abort step above, then use this conditional
      # if: ${{ steps.secret-check.outputs.available == 'true' }}
      shell: bash
      # Key will be blocked out in log output but will be not empty
      run: |
        echo "This command is executed with non-empty key: \
          ${{ secrets.SECRET }}"

    - uses: actions/checkout@v3

    - name: Start docker containers
      env:
        AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      run: |
        docker-compose -f docker-compose-test.yml up --build --detach
        sleep 10  # wait for database to be ready

    - name: Run backend unit tests
      run: docker-compose exec -T backend npm run unit

    - shell: bash
      run: |
        echo "organization variable : ${{ secrets.AUTH0_AUDIENCE }}"
        echo "overridden variable : ${{ vars.AUTH0_AUDIENCE }}"
        echo "variable from shell environment : $AUTH0_AUDIENCE"
        echo "variable from shell environment : $AUTH0_AUDIENCE2"

    - name: Check secrets presence
      id: checksecrets
      shell: bash
      run: |
        if [ "$SECRET" == "" ]; then
          echo "secretspresent=NO" >> $GITHUB_OUTPUT
        else
          echo "secretspresent=YES" >> $GITHUB_OUTPUT
        fi
      env:
        SECRET: ${{ secrets.SECRET}}
    - name: run step if secret is present
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      run: echo secret is present

    - name: Run backend E2E tests
      # with:
      #   AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      #   AUTH0_ISSUER_BASE_URL: ${{ secrets.AUTH0_ISSUER_BASE_URL }}
      #   AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      #   AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      env:
        AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
        AUTH0_ISSUER_BASE_URL: ${{ secrets.AUTH0_ISSUER_BASE_URL }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      run: docker-compose exec -T backend npm run e2e


    # - name: Run frontend E2E tests
    #   run: docker-compose exec -T frontend npm run e2e
